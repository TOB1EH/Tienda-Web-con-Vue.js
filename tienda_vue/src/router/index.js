// router/index.js - Configuraci√≥n de Vue Router 4
// 
// Vue Router es la librer√≠a oficial de enrutamiento para Vue.js
// Permite crear Single Page Applications (SPA) con navegaci√≥n entre vistas
// sin recargar la p√°gina
//
// Documentaci√≥n oficial: https://router.vuejs.org/

import { createRouter, createWebHistory } from 'vue-router'

// Importamos los componentes que servir√°n como vistas/p√°ginas
// En una aplicaci√≥n real, estos estar√≠an en la carpeta views/
import InicioView from '../views/InicioView.vue'
import ProductosView from '../views/ProductosView.vue' 
import ProductoDetalleView from '../views/ProductoDetalleView.vue'
import ClientesView from '../views/ClientesView.vue'
import CarritoView from '../views/CarritoView.vue'

// Definici√≥n de rutas de la aplicaci√≥n
// Cada ruta asocia una URL con un componente espec√≠fico
const routes = [
  // RUTA RA√çZ: P√°gina de inicio
  {
    path: '/',
    name: 'inicio',
    component: InicioView,
    meta: {
      title: 'Inicio - TiendaVue',
      description: 'P√°gina principal del sistema de gesti√≥n'
    }
  },
  
  // RUTA PRODUCTOS: Lista de productos con b√∫squeda
  {
    path: '/productos',
    name: 'productos',
    component: ProductosView,
    meta: {
      title: 'Productos - TiendaVue',
      description: 'Cat√°logo de productos disponibles'
    }
  },
  
  // RUTA DIN√ÅMICA: Detalle de producto espec√≠fico
  // :id es un par√°metro din√°mico que captura el ID del producto
  {
    path: '/productos/:id',
    name: 'producto-detalle',
    component: ProductoDetalleView,
    // Props: permite pasar el par√°metro de ruta como prop al componente
    props: true,
    meta: {
      title: 'Detalle del Producto - TiendaVue',
      description: 'Informaci√≥n detallada del producto'
    },
    // Guardia de ruta: validaci√≥n antes de entrar a la ruta
    beforeEnter: (to, from, next) => {
      // Verificamos que el ID sea un n√∫mero v√°lido
      const id = parseInt(to.params.id)
      if (isNaN(id) || id <= 0) {
        // Si el ID no es v√°lido, redirigimos a productos
        console.warn(`‚ö†Ô∏è ID de producto inv√°lido: ${to.params.id}`)
        next('/productos')
      } else {
        // Si es v√°lido, permitimos el acceso
        next()
      }
    }
  },
  
  // RUTA CLIENTES: Gesti√≥n de clientes
  {
    path: '/clientes',
    name: 'clientes',
    component: ClientesView,
    meta: {
      title: 'Gesti√≥n de Clientes - TiendaVue',
      description: 'Registro y administraci√≥n de clientes'
    }
  },

  // RUTA CARRITO: Carrito de compras
  {
    path: '/carrito',
    name: 'carrito',
    component: CarritoView,
    meta: {
      title: 'Carrito de Compras - TiendaVue',
      description: 'Productos seleccionados para compra'
    }
  },

  // RUTA COMOD√çN: Maneja URLs no encontradas (404)
  {
    path: '/:pathMatch(.*)*',
    name: 'no-encontrada',
    component: () => import('../views/NotFoundView.vue'),
    meta: {
      title: '404 - P√°gina no encontrada',
      description: 'La p√°gina solicitada no existe'
    }
  }
]

// Creaci√≥n del router con configuraci√≥n
const router = createRouter({
  // MODO HISTORY: URLs limpias sin # (requiere configuraci√≥n del servidor)
  // Alternativa: createWebHashHistory() para URLs con # (no requiere config servidor)
  history: createWebHistory(import.meta.env.BASE_URL),
  
  // Rutas de la aplicaci√≥n
  routes,
  
  // COMPORTAMIENTO DE SCROLL: Controla c√≥mo se maneja el scroll al navegar
  scrollBehavior(to, from, savedPosition) {
    // Si el usuario us√≥ botones atr√°s/adelante, restaurar posici√≥n guardada
    if (savedPosition) {
      return savedPosition
    }
    // Si hay un hash (#seccion), hacer scroll a ese elemento
    if (to.hash) {
      return {
        el: to.hash,
        behavior: 'smooth'
      }
    }
    // Por defecto, scroll al inicio de la p√°gina
    return { top: 0 }
  }
})

// GUARDIA GLOBAL: Se ejecuta antes de cada cambio de ruta
router.beforeEach((to, from, next) => {
  // Actualizamos el t√≠tulo de la p√°gina basado en meta.title
  if (to.meta.title) {
    document.title = to.meta.title
  }
  
  // Log para debugging (√∫til en desarrollo)
  console.log(`üß≠ Navegando de "${from.name}" a "${to.name}"`)
  
  // Simulaci√≥n de autenticaci√≥n (ejemplo)
  // if (to.meta.requiresAuth && !isAuthenticated()) {
  //   next('/login')
  // } else {
  //   next()
  // }
  
  // Permitir navegaci√≥n
  next()
})

// GUARDIA GLOBAL: Se ejecuta despu√©s de cada cambio de ruta
router.afterEach((to, from) => {
  // Analytics o tracking (ejemplo)
  // trackPageView(to.path)
  
  // Log de navegaci√≥n exitosa
  console.log(`‚úÖ Navegaci√≥n completada a: ${to.path}`)
})

// ERROR HANDLER: Maneja errores de navegaci√≥n
router.onError((error) => {
  console.error('‚ùå Error en el router:', error)
  
  // En producci√≥n, enviar√≠as este error a un servicio de monitoreo
  // como Sentry, LogRocket, etc.
})

// Exportamos el router para usar en main.js
export default router

// EXPLICACI√ìN DE CONCEPTOS PARA APRENDIZAJE:
//
// 1. TIPOS DE HISTORIA DEL NAVEGADOR:
//    - createWebHistory(): URLs normales (ejemplo.com/productos)
//    - createWebHashHistory(): URLs con hash (ejemplo.com/#/productos)
//    - createMemoryHistory(): Para testing o SSR
//
// 2. PAR√ÅMETROS DE RUTA:
//    - :id ‚Üí Par√°metro requerido
//    - :id? ‚Üí Par√°metro opcional
//    - :id+ ‚Üí Uno o m√°s par√°metros
//    - :id* ‚Üí Cero o m√°s par√°metros
//
// 3. GUARDIAS DE NAVEGACI√ìN:
//    - beforeEach: Antes de cualquier ruta
//    - beforeEnter: Antes de una ruta espec√≠fica  
//    - beforeRouteEnter: En el componente, antes de entrar
//    - beforeRouteUpdate: En el componente, al actualizar
//    - beforeRouteLeave: En el componente, antes de salir
//
// 4. META CAMPOS:
//    Informaci√≥n adicional sobre la ruta que puede usarse en:
//    - T√≠tulos de p√°gina
//    - Breadcrumbs
//    - Permisos/autenticaci√≥n
//    - SEO metadata
//
// 5. LAZY LOADING:
//    component: () => import('../views/Component.vue')
//    Carga el componente solo cuando se visita la ruta
//    Mejora el rendimiento inicial de la aplicaci√≥n